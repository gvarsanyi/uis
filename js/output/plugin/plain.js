// Generated by CoffeeScript 1.7.1
(function() {
  var icons, info_out, ngroup, obj_to_str, print, subitem, timestamp, types,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ngroup = require('../ngroup');

  types = require('../stat-types');

  timestamp = function() {
    var fix, t;
    fix = function(n, digits) {
      if (digits == null) {
        digits = 2;
      }
      while (String(n).length < digits) {
        n = '0' + n;
      }
      return n;
    };
    return (t = new Date()).getHours() + ':' + fix(t.getMinutes()) + ':' + fix(t.getSeconds()) + '.' + fix(t.getMilliseconds(), 3);
  };

  icons = {
    start: '⚐',
    check: '✔',
    error: '✗',
    warning: '⚠',
    working: '⌛'
  };

  subitem = '↳';

  print = function() {
    var icon, msg, output, repo, status, task;
    status = arguments[0], repo = arguments[1], task = arguments[2], msg = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    icon = ' ' + (icons[status] || ' ');
    output = status === 'error' ? 'error' : 'log';
    repo = ' [' + repo + ']';
    while (repo.length < 7) {
      repo = ' ' + repo;
    }
    return console[output].apply(console, [timestamp() + repo + icon + ' ' + task].concat(__slice.call(msg)));
  };

  obj_to_str = function(status, inf) {
    var indent, n, out, pre, push, _i, _ref, _ref1;
    if (!inf.file) {
      '[' + status.toUpperCase() + '] ' + String(inf) + '\n';
    }
    out = '[' + status.toUpperCase() + '] ' + inf.file + (inf.line ? ' @ line ' + inf.line : '') + '\n';
    indent = '  ';
    if (inf.lines) {
      for (n = _i = _ref = inf.lines.from, _ref1 = inf.lines.to; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; n = _ref <= _ref1 ? ++_i : --_i) {
        if (inf.lines[n] != null) {
          push = String(n).length < String(inf.lines.to).length ? ' ' : '';
          pre = indent;
          if (n === inf.line || (typeof inf.line === 'object' && __indexOf.call(inf.line, n) >= 0)) {
            pre = pre.split(' ').join('>');
          }
          out += pre + '(' + n + ') ' + inf.lines[n] + '\n';
        }
      }
    }
    if (inf.title) {
      out += indent + inf.title + '\n';
    }
    if (inf.description) {
      out += indent + '  ' + subitem + ' ' + inf.description.split('\n').join('\n    ' + indent) + '\n';
    }
    return out;
  };

  info_out = function(status, inf) {
    var block, output, part, _i, _len, _results;
    output = status === 'error' ? 'error' : 'log';
    console[output]('');
    _results = [];
    for (_i = 0, _len = inf.length; _i < _len; _i++) {
      block = inf[_i];
      if (block instanceof Array) {
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = block.length; _j < _len1; _j++) {
            part = block[_j];
            _results1.push(console[output](obj_to_str(status, part)));
          }
          return _results1;
        })());
      } else {
        _results.push(console[output](obj_to_str(status, block)));
      }
    }
    return _results;
  };

  module.exports.update = function(update) {
    var count, done, error, error_state, msg, size, status, warning, _ref;
    _ref = update.stat, done = _ref.done, count = _ref.count, error = _ref.error, warning = _ref.warning, size = _ref.size, status = _ref.status;
    error_state = 'start';
    if (done) {
      error_state = 'check';
    }
    if (warning) {
      error_state = 'warning';
    }
    if (error) {
      error_state = 'error';
    }
    if (done || error || warning) {
      msg = '';
      if (error) {
        msg = ': ' + ngroup(error.length, 'error');
      }
      if (warning != null) {
        msg += msg ? ', ' : ': ';
        msg += ngroup(warning.length, 'warning');
      }
      if (update.task === 'tester' && size) {
        msg += msg ? ' of ' : ': ';
        msg += ngroup(size, 'test');
      } else if (size) {
        msg += msg ? ', ' : ': ';
        msg += ngroup(size, 'byte');
      }
      if (update.task.substr(0, 5) === 'files' && status) {
        msg += msg ? ', ' : ': ';
        msg += ngroup(status, 'file');
      }
      print(error_state, update.repo, (types[update.task] || update.task) + msg);
      if (error != null) {
        info_out('error', error);
      }
      if (warning != null) {
        return info_out('warning', warning);
      }
    }
  };

  module.exports.note = function(note) {
    return console.log('[' + note.repo + ']', note.note);
  };

}).call(this);
