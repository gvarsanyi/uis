// Generated by CoffeeScript 1.7.1
(function() {
  var Outblock, colors, enter, esc, escaped_out, first, head_shown, heads, hourglass, ngroup, outblock, plural, print_block, shown, stats, types;

  Outblock = require('../outblock');

  ngroup = require('../ngroup');

  plural = require('../plural');

  stats = require('../../stats');

  types = require('../stat-types');

  console.log('');

  outblock = null;

  esc = String.fromCharCode(27);

  first = true;

  enter = '↲';

  hourglass = '⌛';

  colors = {
    err: [255, 20, 20],
    faint: [63, 63, 63],
    warn: [255, 159, 63],
    white: [220, 220, 220]
  };

  heads = {
    css: ['    ╔═╗╔═╗╔═╗  ', '    ║  ╚═╗╚═╗', '    ╚═╝╚═╝╚═╝'],
    html: [' ╦ ╦╔╦╗╔╦╗╦    ', ' ╠═╣ ║ ║║║║', ' ╩ ╩ ╩ ╩ ╩╩═╝'],
    js: ['         ╦╔═╗  ', '         ║╚═╗', '       ╚═╝╚═╝'],
    test: [' ╔╦╗╔═╗╔═╗╔╦╗  ', '  ║ ╠╣ ╚═╗ ║', '  ╩ ╚═╝╚═╝ ╩']
  };

  print_block = function(push_x, push_y, title, inf, prev_inf) {
    var color, n, working, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    working = !inf.done && (inf.status < inf.count || (prev_inf == null) || (prev_inf.done && !prev_inf.error));
    if ((inf.status != null) || working) {
      outblock.bgcolor([36, 36, 36]);
    } else {
      outblock.color([50, 50, 50]).bgcolor([12, 12, 12]);
    }
    outblock.pos(push_x, push_y).write(title, 20).reset().pos(push_x, push_y + 1).write('', 20).pos(push_x, push_y + 2).write('', 20).pos(push_x, push_y + 1);
    if (working) {
      outblock.color([86, 86, 86]).write(hourglass, prev_inf).x(push_x).reset();
    }
    if ((_ref = inf.error) != null ? _ref.length : void 0) {
      outblock.color(colors.err).write(ngroup(inf.error.length)).color(colors.faint).write(plural(' error', inf.error.length));
    } else {
      if (inf.status) {
        if (title === 'test' || title === 'coverage') {
          if ((_ref1 = inf.warning) != null ? _ref1.length : void 0) {
            outblock.color(colors.warn).write(ngroup(inf.warning.length)).color(colors.faint).write(plural(' warning', inf.warning.length));
          } else if (title === 'test') {
            outblock.color(colors.white).write(ngroup(inf.size)).color(colors.faint).write(plural(' test', inf.size) + ' passed');
          } else {
            color = colors.white;
            if (inf.size.all.statements < (((_ref2 = config.test) != null ? (_ref3 = _ref2.coverage) != null ? _ref3.bar : void 0 : void 0) || 80)) {
              color = colors.warn;
            }
            outblock.color(color).write(inf.size.all.statements + '%').color(colors.faint).write(' of statements');
          }
        } else {
          n = ngroup(inf.status - (((_ref4 = inf.warning) != null ? _ref4.length : void 0) || 0));
          outblock.color(colors.white).write(n);
          if ((_ref5 = inf.warning) != null ? _ref5.length : void 0) {
            n = ngroup(inf.warning.length);
            outblock.write('+').color(colors.warn).write(n);
          }
          outblock.color(colors.faint).write(plural(' file', inf.status));
        }
      }
    }
    if (inf.watched && title !== 'test') {
      outblock.color(colors.faint).write(' + ').reset().write(ngroup(inf.watched)).color(colors.faint).write(' inc');
    }
    if (inf.size && title !== 'coverage' && title !== 'test') {
      outblock.pos(push_x, push_y + 2).color([160, 160, 160]).write(ngroup(inf.size)).color(colors.faint).write(' b').reset();
    }
    return outblock.reset();
  };

  shown = {};

  head_shown = {};

  module.exports.update = function(update) {
    var inf, name, new_sum, orig_sum, prev_inf, push_x, push_y, repo, type, _ref, _results;
    new_sum = orig_sum = ((function() {
      var _results;
      _results = [];
      for (name in shown) {
        _results.push(name);
      }
      return _results;
    })()).length;
    for (name in stats.data) {
      if (!shown[name]) {
        new_sum += 1;
      }
    }
    if (orig_sum !== new_sum) {
      shown[name] = true;
      if (outblock != null) {
        outblock.setHeight(new_sum * 4);
        head_shown = {};
      } else {
        outblock = new Outblock(process.stdout.rows - 1);
      }
    }
    push_y = 0;
    _ref = {
      css: stats.data.css,
      html: stats.data.html,
      js: stats.data.js,
      test: stats.data.test
    };
    _results = [];
    for (name in _ref) {
      repo = _ref[name];
      if (repo) {
        prev_inf = null;
        if (head_shown[name] == null) {
          outblock.pos(0, push_y).bgcolor([36, 36, 36]).write(heads[name][0]).reset().pos(0, push_y + 1).write(heads[name][1]).pos(0, push_y + 2).write(heads[name][2]);
          head_shown[name] = true;
        }
        push_x = 15;
        for (type in repo) {
          inf = repo[type];
          if (!(inf.count > 0)) {
            continue;
          }
          print_block(push_x, push_y, types[type] || type, inf, prev_inf);
          push_x += 20;
          prev_inf = inf;
        }
      }
      _results.push(push_y += 4);
    }
    return _results;
  };

  escaped_out = function(msg) {
    var i, out;
    out = String(msg).trim().split('\n').join(enter).split(esc).join('\\0').substr(0, process.stdout.columns - 10);
    process.stdout.write(((function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = process.stdout.columns; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(' ');
      }
      return _results;
    })()).join(''));
    return process.stdout.write('\r' + out + '\r');
  };

  module.exports.log = function(msg) {
    return escaped_out('[' + msg.repo + '] ' + msg.msg);
  };

  module.exports.error = function(msg) {
    return escaped_out('[' + msg.repo + '] ERROR ' + msg.msg);
  };

}).call(this);
