// Generated by CoffeeScript 1.7.1
(function() {
  var RgbAnsi;

  RgbAnsi = (function() {
    var ansi_colors16, ansi_colors8, rgb_distance, rgb_reduce, validate_rgb;

    function RgbAnsi() {}

    ansi_colors16 = [[0, 0, 0], [205, 0, 0], [0, 205, 0], [205, 205, 0], [0, 0, 238], [205, 0, 205], [0, 205, 205], [229, 229, 229], [127, 127, 127], [255, 0, 0], [0, 255, 0], [255, 255, 0], [92, 92, 255], [255, 0, 255], [0, 255, 255], [255, 255, 255]];

    ansi_colors8 = ansi_colors16.slice(0, 8);

    rgb_distance = function(rgb1, rgb2) {
      var b, c, g, h, r, s;
      r = rgb1[0], g = rgb1[1], b = rgb1[2];
      s = rgb2[0], h = rgb2[1], c = rgb2[2];
      r -= s;
      g -= h;
      b -= c;
      return r * r + g * g + b * b;
    };

    rgb_reduce = function(rgb, mode) {
      var closest, color, colors, distance, i, min_distance, _i, _len;
      colors = mode === 16 ? ansi_colors16 : ansi_colors8;
      for (i = _i = 0, _len = colors.length; _i < _len; i = ++_i) {
        color = colors[i];
        if (distance = rgb_distance(color, rgb) < min_distance || (typeof min_distance === "undefined" || min_distance === null)) {
          min_distance = distance;
          closest = i;
        }
      }
      return i;
    };

    validate_rgb = function(rgb, callback) {
      var b, g, item, n, r, _ref;
      if (!((rgb != null ? rgb.length : void 0) === 3 && typeof rgb === 'object')) {
        throw new Error('Invalid parameters: ' + (String(rgb) || 'no parameters'));
      }
      _ref = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = rgb.length; _i < _len; _i++) {
          item = rgb[_i];
          if (!((n = Number(item)) > 1 || n === 1 || n === 0)) {
            throw new Error('"' + item + '" is not a valid number (range: 0 .. 255)');
          }
          _results.push(n);
        }
        return _results;
      })(), r = _ref[0], g = _ref[1], b = _ref[2];
      return callback(r, g, b);
    };

    RgbAnsi.prototype.rgb8 = function(rgb) {
      return validate_rgb(rgb, function(r, g, b) {
        return rgb_reduce([r, g, b], 8);
      });
    };

    RgbAnsi.prototype.rgb16 = function(rgb) {
      return validate_rgb(rgb, function(r, g, b) {
        return rgb_reduce([r, g, b], 16);
      });
    };

    RgbAnsi.prototype.rgb256 = function(rgb) {
      return validate_rgb(rgb, function(r, g, b) {
        var color, grey, mod, poss, step, val, _i, _len, _ref, _ref1;
        grey = false;
        poss = true;
        step = 2.5;
        while (poss) {
          if (r < step || g < step || b < step) {
            grey = r < step && g < step && b < step;
            poss = false;
          }
          step += 42.5;
        }
        if (grey) {
          return 232 + Math.floor((r + g + b) / 33);
        }
        color = 16;
        _ref = [[r, 36], [g, 6], [b, 1]];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], val = _ref1[0], mod = _ref1[1];
          color += Math.floor(6 * val / 256) * mod;
        }
        return color;
      });
    };

    return RgbAnsi;

  })();

  module.exports = RgbAnsi;

}).call(this);
