// Generated by CoffeeScript 1.7.1
(function() {
  var Outblock, RgbAnsi,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  RgbAnsi = require('./rgb-ansi');

  Outblock = (function() {
    var esc, sequence;

    esc = String.fromCharCode(27);

    sequence = function(param, modifier) {
      if (modifier == null) {
        modifier = 'm';
      }
      return process.stdout.write(esc + '[' + param + modifier);
    };

    function Outblock(height) {
      var i, _i, _ref;
      this.height = height;
      this.write = __bind(this.write, this);
      this.pos = __bind(this.pos, this);
      this.y = __bind(this.y, this);
      this.x = __bind(this.x, this);
      this.nobgcolor = __bind(this.nobgcolor, this);
      this.bgcolor = __bind(this.bgcolor, this);
      this.nocolor = __bind(this.nocolor, this);
      this.color = __bind(this.color, this);
      this.nounderline = __bind(this.nounderline, this);
      this.underline = __bind(this.underline, this);
      this.nobold = __bind(this.nobold, this);
      this.bold = __bind(this.bold, this);
      this.clear = __bind(this.clear, this);
      this.setHeight = __bind(this.setHeight, this);
      this.reset = __bind(this.reset, this);
      for (i = _i = 0, _ref = this.height; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        process.stdout.write('\n');
      }
    }

    Outblock.prototype.reset = function() {
      sequence(0);
      return this;
    };

    Outblock.prototype.setHeight = function(new_height) {
      var i, _i, _ref;
      if (new_height < this.height) {
        sequence(this.height - new_height, 'A');
      } else if (new_height > this.height) {
        for (i = _i = 0, _ref = this.height - new_height; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          process.stdout.write('\n');
        }
      }
      this.height = new_height;
      return this;
    };

    Outblock.prototype.clear = function() {
      var _i, _ref;
      sequence(this.height, 'A');
      for (_i = 0, _ref = this.height; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--) {
        process.stdout.write((((function() {
          var _j, _ref1, _results;
          _results = [];
          for (_j = 0, _ref1 = process.stdout.columns; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; 0 <= _ref1 ? _j++ : _j--) {
            _results.push(' ');
          }
          return _results;
        })()).join('')) + '\r\n');
      }
      this._x = this._y = 0;
      return this;
    };

    Outblock.prototype.bold = function() {
      sequence(1);
      return this;
    };

    Outblock.prototype.nobold = function() {
      sequence(21);
      return this;
    };

    Outblock.prototype.underline = function() {
      sequence(4);
      return this;
    };

    Outblock.prototype.nounderline = function() {
      sequence(24);
      return this;
    };

    Outblock.prototype.color = function(rgb) {
      sequence('38;5;' + RgbAnsi.prototype.rgb256(rgb));
      return this;
    };

    Outblock.prototype.nocolor = function() {
      sequence(39);
      return this;
    };

    Outblock.prototype.bgcolor = function(rgb) {
      sequence('48;5;' + RgbAnsi.prototype.rgb256(rgb));
      return this;
    };

    Outblock.prototype.nobgcolor = function() {
      sequence(49);
      return this;
    };

    Outblock.prototype.x = function(_x) {
      this._x = _x;
      return this;
    };

    Outblock.prototype.y = function(_y) {
      this._y = _y;
      return this;
    };

    Outblock.prototype.pos = function(x, y) {
      this.x(x);
      this.y(y);
      return this;
    };

    Outblock.prototype.write = function(msg, clear) {
      var diff, i, limit, x, y;
      x = this._x;
      y = this._y;
      if (y >= this.height || y < 0 || x >= (limit = process.stdout.columns)) {
        return this;
      }
      if (clear > 1 || clear === 1) {
        if (clear > msg.length) {
          msg += ((function() {
            var _i, _ref, _results;
            _results = [];
            for (i = _i = 0, _ref = clear - msg.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
              _results.push(' ');
            }
            return _results;
          })()).join('');
        } else if (clear < msg.length) {
          msg = msg.substr(0, clear);
        }
      }
      if (x < 0) {
        msg = msg.substr(0 - x);
      }
      if (x + msg.length > limit) {
        msg = msg.substr(0, limit - x);
      }
      msg = msg.replace(esc, ' ');
      this._x += msg.length;
      diff = this.height - y;
      sequence(diff, 'A');
      if (x) {
        sequence(x, 'C');
      }
      process.stdout.write(msg + '\r');
      sequence(diff, 'B');
      return this;
    };

    return Outblock;

  })();

  module.exports = Outblock;

}).call(this);
