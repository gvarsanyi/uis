// Generated by CoffeeScript 1.7.1
(function() {
  var FilesMinifier, HtmlFilesMinifier, htmlminify,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  htmlminify = require('html-minifier');

  FilesMinifier = require('../files-minifier');

  HtmlFilesMinifier = (function(_super) {
    __extends(HtmlFilesMinifier, _super);

    function HtmlFilesMinifier() {
      this.workFile = __bind(this.workFile, this);
      return HtmlFilesMinifier.__super__.constructor.apply(this, arguments);
    }

    HtmlFilesMinifier.prototype.workFile = function() {
      return this.preWorkFile(arguments, (function(_this) {
        return function(source, callback) {
          var err, src;
          try {
            if (source.compilable) {
              src = source.compiled;
            } else {
              src = source.data;
            }
            if (src == null) {
              throw new Error('[HtmlFilesMinifier] Missing source: ' + source.path);
            }
            source[_this.sourceProperty] = htmlminify.minify(src, {
              removeComments: true,
              removeCommentsFromCDATA: true,
              removeCDATASectionsFromCDATA: true,
              collapseWhitespace: true,
              collapseBooleanAttributes: true,
              removeRedundantAttributes: true,
              useShortDoctype: true,
              removeEmptyAttributes: true
            });
          } catch (_error) {
            err = _error;
            _this.error(err, source);
          }
          return callback();
        };
      })(this));
    };

    return HtmlFilesMinifier;

  })(FilesMinifier);

  module.exports = HtmlFilesMinifier;

}).call(this);
