// Generated by CoffeeScript 1.7.1
(function() {
  var FilesLinter, JsFilesLinter, coffeelint, jslint,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  coffeelint = require('coffeelint');

  jslint = require('jslint');

  FilesLinter = require('../files-linter');

  JsFilesLinter = (function(_super) {
    __extends(JsFilesLinter, _super);

    function JsFilesLinter() {
      this.wrapError = __bind(this.wrapError, this);
      this.workFile = __bind(this.workFile, this);
      return JsFilesLinter.__super__.constructor.apply(this, arguments);
    }

    JsFilesLinter.prototype.workFile = function() {
      return this.preWorkFile(arguments, (function(_this) {
        return function(source, callback) {
          var err, msg, worker, _i, _j, _len, _len1, _ref, _ref1;
          try {
            if (source.data == null) {
              throw new Error('[' + _this.constructor.name + '] Missing source: ' + source.path);
            }
            if (source.compilable) {
              _ref = coffeelint.lint(source.data);
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                msg = _ref[_i];
                _this.warning(msg, source);
              }
            } else {
              (worker = jslint.load('latest'))(source.data);
              _ref1 = worker.errors;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                msg = _ref1[_j];
                _this.warning(msg, source);
              }
            }
          } catch (_error) {
            err = _error;
            _this.error(err, source);
          }
          return callback();
        };
      })(this));
    };

    JsFilesLinter.prototype.wrapError = function(inf, source) {
      var data, i, line, line_literal, lines, _i, _len, _ref;
      data = JsFilesLinter.__super__.wrapError.apply(this, arguments);
      if (source != null ? source.compilable : void 0) {
        if (inf.lineNumber) {
          data.line = Number(inf.lineNumber);
        }
        if (inf.message) {
          data.title = inf.message;
          if (inf.name) {
            data.title += ' (' + inf.name + ')';
          }
        } else if (inf.name) {
          data.title = inf.name;
        }
        if (inf.description) {
          data.description = inf.description;
        }
        if (data.line && source.data) {
          line = inf.lineNumber - 1;
          if ((lines = source.data.split('\n')).length && lines.length >= line) {
            data.lines = {
              from: Math.max(1, line - 2),
              to: Math.min(lines.length - 1, line * 1 + 4)
            };
            _ref = lines.slice(data.lines.from - 1, +(data.lines.to - 1) + 1 || 9e9);
            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
              line_literal = _ref[i];
              data.lines[i + data.lines.from] = line_literal;
            }
          }
        }
      }
      return data;
    };

    return JsFilesLinter;

  })(FilesLinter);

  module.exports = JsFilesLinter;

}).call(this);
