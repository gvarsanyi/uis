// Generated by CoffeeScript 1.7.1
(function() {
  var FilesDeployer, FilesTask, fs, mkdirp, path,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  path = require('path');

  mkdirp = require('mkdirp');

  FilesTask = require('../files-task');

  FilesDeployer = (function(_super) {
    __extends(FilesDeployer, _super);

    function FilesDeployer() {
      this.workFile = __bind(this.workFile, this);
      return FilesDeployer.__super__.constructor.apply(this, arguments);
    }

    FilesDeployer.prototype.name = 'filesDeployer';

    FilesDeployer.prototype.fileCondition = function(source) {
      return !source.options.testOnly;
    };

    FilesDeployer.prototype.workFile = function() {
      return this.preWorkFile(arguments, (function(_this) {
        return function(source, callback) {
          var basedir, err, src, target;
          try {
            if (source.options.minify) {
              src = source.minified;
            } else if (source.compilable) {
              src = source.compiled;
            } else {
              src = source.data;
            }
            if (src == null) {
              throw new Error('[FilesDeployer] Missing source: ' + source.path);
            }
            if (!(basedir = source.options.basedir)) {
              throw new Error('[FilesDeployer] Missing basedir');
            }
            if (source.path.substr(0, basedir.length) !== basedir) {
              throw new Error('[FilesDeployer]  Path (\'' + source.path + '\' does not begin with basedir: \'' + basedir + '\'');
            }
            target = source.options.deploy + source.path.substr(basedir.length);
            if (target.toLowerCase().substr(target.length - 5) === '.jade') {
              target = target.substr(0, target.length - 4) + 'html';
            }
            return mkdirp(path.dirname(target), null, function(err) {
              if (err) {
                _this.error(err, source);
                return callback();
              }
              return fs.writeFile(target, src, function(err) {
                if (err) {
                  _this.error(err, source);
                }
                return callback();
              });
            });
          } catch (_error) {
            err = _error;
            _this.error(err, source);
            return callback();
          }
        };
      })(this));
    };

    return FilesDeployer;

  })(FilesTask);

  module.exports = FilesDeployer;

}).call(this);
