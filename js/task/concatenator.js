// Generated by CoffeeScript 1.7.1
(function() {
  var Concatenator, Task,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Task = require('../task');

  Concatenator = (function(_super) {
    __extends(Concatenator, _super);

    function Concatenator() {
      this.work = __bind(this.work, this);
      this.followUp = __bind(this.followUp, this);
      return Concatenator.__super__.constructor.apply(this, arguments);
    }

    Concatenator.prototype.name = 'concatenator';

    Concatenator.prototype.followUp = function(node) {
      var _ref;
      return (_ref = this.source.tasks.minifier) != null ? _ref.work(node) : void 0;
    };

    Concatenator.prototype.work = function() {
      return this.preWork(arguments, (function(_this) {
        return function(callback) {
          var concatenated, err, path, source, src, _ref;
          try {
            concatenated = '';
            _ref = _this.source.sources;
            for (path in _ref) {
              source = _ref[path];
              if (source.compilable) {
                src = source.compiled;
              } else {
                src = source.data;
              }
              if (src == null) {
                console.log(source);
                throw new Error('[Concatenator] Missing source: ' + source.path);
              }
              concatenated += src + '\n\n';
            }
            return callback(null, concatenated);
          } catch (_error) {
            err = _error;
            return callback(err);
          }
        };
      })(this));
    };

    return Concatenator;

  })(Task);

  module.exports = Concatenator;

}).call(this);
