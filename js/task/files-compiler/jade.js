// Generated by CoffeeScript 1.7.1
(function() {
  var FilesCompiler, JadeFilesCompiler, config, jade,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jade = require('jade');

  FilesCompiler = require('../files-compiler');

  config = require('../../config');

  require('../../../patch/jade-includes-patch');

  JadeFilesCompiler = (function(_super) {
    __extends(JadeFilesCompiler, _super);

    function JadeFilesCompiler() {
      this.workFile = __bind(this.workFile, this);
      return JadeFilesCompiler.__super__.constructor.apply(this, arguments);
    }

    JadeFilesCompiler.prototype.workFile = function() {
      return this.preWorkFile(arguments, (function(_this) {
        return function(source, callback) {
          var err, includes;
          try {
            if (source.data == null) {
              throw new Error('[JadeFilesCompiler] Missing source: ' + source.path);
            }
            source[_this.sourceProperty] = jade.render(source.data, {
              filename: source.path,
              pretty: true,
              includes: (includes = [])
            });
            if (!config.singleRun) {
              _this.watch(includes, source, function(err) {
                if (err) {
                  return _this.error(err, source);
                }
              });
            }
            return callback();
          } catch (_error) {
            err = _error;
            _this.error(err, source);
            return callback();
          }
        };
      })(this));
    };

    return JadeFilesCompiler;

  })(FilesCompiler);

  module.exports = JadeFilesCompiler;

}).call(this);
