// Generated by CoffeeScript 1.7.1
(function() {
  var FilesLoader, FilesTask, fs, md5,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  md5 = require('MD5');

  FilesTask = require('../files-task');

  FilesLoader = (function(_super) {
    __extends(FilesLoader, _super);

    function FilesLoader() {
      this.workFile = __bind(this.workFile, this);
      this.followUp = __bind(this.followUp, this);
      this.fileCondition = __bind(this.fileCondition, this);
      return FilesLoader.__super__.constructor.apply(this, arguments);
    }

    FilesLoader.prototype.name = 'filesLoader';

    FilesLoader.prototype.sourceProperty = 'data';

    FilesLoader.prototype.fileCondition = function(source) {
      return !source.options.testOnly || this.source.name === 'test';
    };

    FilesLoader.prototype.followUp = function(node) {
      return this.source.tasks.filesCompiler.work(node);
    };

    FilesLoader.prototype.workFile = function() {
      return this.preWorkFile(arguments, (function(_this) {
        return function(source, callback) {
          var err, finish;
          finish = function(err, data) {
            var changed, hash;
            if (err) {
              _this.error(err, source);
            }
            source[_this.sourceProperty] = data;
            hash = md5(data || '');
            changed = hash !== source.hash;
            source.hash = hash;
            return callback(changed);
          };
          try {
            return fs.readFile(source.path, {
              encoding: 'utf8'
            }, finish);
          } catch (_error) {
            err = _error;
            return finish(err);
          }
        };
      })(this));
    };

    return FilesLoader;

  })(FilesTask);

  module.exports = FilesLoader;

}).call(this);
