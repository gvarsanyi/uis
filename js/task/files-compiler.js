// Generated by CoffeeScript 1.7.1
(function() {
  var FilesCompiler, FilesTask,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  FilesTask = require('../files-task');

  FilesCompiler = (function(_super) {
    __extends(FilesCompiler, _super);

    function FilesCompiler() {
      this.followUp = __bind(this.followUp, this);
      return FilesCompiler.__super__.constructor.apply(this, arguments);
    }

    FilesCompiler.prototype.name = 'filesCompiler';

    FilesCompiler.prototype.sourceProperty = 'compiled';

    FilesCompiler.prototype.followUp = function(node) {
      var _ref, _ref1, _ref2;
      if ((_ref = this.source.tasks.concatenator) != null) {
        _ref.work(node);
      }
      if ((_ref1 = this.source.tasks.filesMinifier) != null) {
        _ref1.work(node);
      }
      return (_ref2 = this.source.tasks.filesLinter) != null ? _ref2.work(node) : void 0;
    };

    FilesCompiler.prototype.fileCondition = function(source) {
      return !!source.compilable;
    };

    return FilesCompiler;

  })(FilesTask);

  module.exports = FilesCompiler;

}).call(this);
