// Generated by CoffeeScript 1.7.1
(function() {
  var Deployer, Task, config, fs, mkdirp, path,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  path = require('path');

  mkdirp = require('mkdirp');

  Task = require('../task');

  config = require('../config');

  Deployer = (function(_super) {
    __extends(Deployer, _super);

    function Deployer() {
      this.work = __bind(this.work, this);
      this.followUp = __bind(this.followUp, this);
      return Deployer.__super__.constructor.apply(this, arguments);
    }

    Deployer.prototype.name = 'deployer';

    Deployer.prototype.followUp = function(node) {
      var _ref;
      return (_ref = this.source.tasks.tester) != null ? _ref.work(node) : void 0;
    };

    Deployer.prototype.work = function() {
      return this.preWork(arguments, (function(_this) {
        return function(callback) {
          var err, src, target;
          try {
            if (config[_this.source.name].minify) {
              src = _this.source.tasks.minifier.result();
            } else {
              src = _this.source.tasks.concatenator.result();
            }
            if (!src) {
              throw new Error('[Deployer] Missing source');
            }
            target = config[_this.source.name].deploy;
            return mkdirp(path.dirname(target), function(err) {
              if (err) {
                return callback(err);
              }
              return fs.writeFile(target, src, function(err) {
                return callback(err);
              });
            });
          } catch (_error) {
            err = _error;
            return callback(err);
          }
        };
      })(this));
    };

    return Deployer;

  })(Task);

  module.exports = Deployer;

}).call(this);
