// Generated by CoffeeScript 1.7.1
(function() {
  var FilesTask, Task, messenger,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  Task = require('./task');

  messenger = require('./messenger');

  FilesTask = (function(_super) {
    __extends(FilesTask, _super);

    function FilesTask() {
      this.preWorkFile = __bind(this.preWorkFile, this);
      this.work = __bind(this.work, this);
      this.clear = __bind(this.clear, this);
      return FilesTask.__super__.constructor.apply(this, arguments);
    }

    FilesTask.prototype.clear = function(callback) {
      FilesTask.__super__.clear.call(this);
      delete this._count;
      return typeof callback === "function" ? callback() : void 0;
    };

    FilesTask.prototype.work = function(node, callback) {
      var count, done, finished_file, path, source, sources, work_file_done, _i, _len, _ref, _results;
      if (typeof node === 'function') {
        callback = node;
        node = void 0;
      }
      if (node) {
        work_file_done = (function(_this) {
          return function() {
            messenger.sendStat(_this.name);
            if (!_this.error()) {
              if (typeof _this.followUp === "function") {
                _this.followUp(node);
              }
            }
            return _this.source.checkAllTasksFinished();
          };
        })(this);
        return this.workFile(node, work_file_done, true);
      }
      sources = [];
      _ref = this.source.sources;
      for (path in _ref) {
        source = _ref[path];
        if ((this.fileCondition == null) || this.fileCondition(source)) {
          sources.push(source);
        }
      }
      this.clear();
      this.count(count = sources.length);
      this.status(done = 0);
      messenger.sendStat(this.name);
      if (!count) {
        if (typeof callback === "function") {
          callback();
        }
        if (!this.error()) {
          if (typeof this.followUp === "function") {
            this.followUp(node);
          }
        }
        return this.source.checkAllTasksFinished();
      }
      finished_file = (function(_this) {
        return function() {
          done += 1;
          if (done === count) {
            if (typeof callback === "function") {
              callback(_this.error());
            }
            messenger.sendStat(_this.name);
            if (!_this.error()) {
              if (typeof _this.followUp === "function") {
                _this.followUp(node);
              }
            }
            return _this.source.checkAllTasksFinished();
          }
        };
      })(this);
      _results = [];
      for (_i = 0, _len = sources.length; _i < _len; _i++) {
        source = sources[_i];
        if (this.sourceProperty != null) {
          delete source[this.sourceProperty];
        }
        this.status(this.status() + 1);
        _results.push(this.workFile(source, finished_file));
      }
      return _results;
    };

    FilesTask.prototype.preWorkFile = function(args, work_file) {
      var callback, post_work_file, source, underscored, _i, _len, _ref;
      source = args[0];
      callback = args[1];
      _ref = ['_error', '_warning'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        underscored = _ref[_i];
        if (source[underscored] != null) {
          delete source[underscored][this.name];
        }
      }
      if (!((this.fileCondition == null) || this.fileCondition(source))) {
        return callback();
      }
      this.status(this.status() - 1);
      if (args[2]) {
        messenger.sendStat(this.name);
      }
      post_work_file = (function(_this) {
        return function() {
          var pass_back;
          pass_back = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _this.status(_this.status() + 1);
          if (args[2]) {
            messenger.sendStat(_this.name);
          }
          if (pass_back != null ? pass_back.length : void 0) {
            return callback.apply(null, pass_back);
          } else {
            return callback();
          }
        };
      })(this);
      return work_file(source, post_work_file);
    };

    return FilesTask;

  })(Task);

  module.exports = FilesTask;

}).call(this);
