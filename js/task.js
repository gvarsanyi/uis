// Generated by CoffeeScript 1.7.1
(function() {
  var Task, WatchedFile, fs, gaze, glob, md5, messenger, path,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  fs = require('fs');

  path = require('path');

  gaze = require('gaze');

  glob = require('glob');

  md5 = require('MD5');

  messenger = require('./messenger');

  WatchedFile = (function() {
    function WatchedFile(path) {
      this.path = path;
      this.changed = __bind(this.changed, this);
      fs.readFile(this.path, {
        encode: 'utf8'
      }, (function(_this) {
        return function(err, data) {
          if (data == null) {
            data = '';
          }
          _this.data = data;
          return _this.hash = md5(data);
        };
      })(this));
    }

    WatchedFile.prototype.changed = function(callback) {
      return fs.readFile(this.path, {
        encode: 'utf8'
      }, (function(_this) {
        return function(err, data) {
          var hash;
          if (data == null) {
            data = '';
          }
          if (err) {
            return typeof callback === "function" ? callback() : void 0;
          }
          if (_this.hash !== (hash = md5(data))) {
            _this.data = data;
            _this.hash = hash;
            return typeof callback === "function" ? callback() : void 0;
          }
        };
      })(this));
    };

    return WatchedFile;

  })();

  Task = (function() {
    function Task(source) {
      this.source = source;
      this.preWork = __bind(this.preWork, this);
      this.wrapError = __bind(this.wrapError, this);
      this.work = __bind(this.work, this);
      this.watched = __bind(this.watched, this);
      this.watchedFileChanged = __bind(this.watchedFileChanged, this);
      this.watch = __bind(this.watch, this);
      this.finishedAt = __bind(this.finishedAt, this);
      this.startedAt = __bind(this.startedAt, this);
      this.status = __bind(this.status, this);
      this.size = __bind(this.size, this);
      this.result = __bind(this.result, this);
      this.warning = __bind(this.warning, this);
      this.error = __bind(this.error, this);
      this._issue = __bind(this._issue, this);
      this.done = __bind(this.done, this);
      this.count = __bind(this.count, this);
      this.clear = __bind(this.clear, this);
      this._watched = {};
    }

    Task.prototype.clear = function(callback) {
      var file_path, source, underscored, _i, _len, _ref, _ref1;
      delete this._error;
      delete this._warning;
      delete this._result;
      delete this._status;
      delete this._startedAt;
      delete this._finishedAt;
      _ref = this.source.sources;
      for (file_path in _ref) {
        source = _ref[file_path];
        _ref1 = ['_error', '_warning'];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          underscored = _ref1[_i];
          if (source[underscored] != null) {
            delete source[underscored][this.name];
          }
        }
      }
      this._count = 1;
      return typeof callback === "function" ? callback() : void 0;
    };

    Task.prototype.count = function(n) {
      if (n != null) {
        this._count = n;
      }
      return this._count;
    };

    Task.prototype.done = function() {
      var count, status;
      if ((count = this.count()) === 0) {
        return true;
      }
      if (status = this.status()) {
        return status === count;
      }
      return false;
    };

    Task.prototype._issue = function(type, add, source) {
      var file_path, item, list, underscored, _base, _i, _len, _name, _ref, _ref1, _ref2, _ref3;
      underscored = '_' + type;
      if (add != null) {
        if (source) {
          if (source[underscored] == null) {
            source[underscored] = {};
          }
          if ((_base = source[underscored])[_name = this.name] == null) {
            _base[_name] = [];
          }
          source[underscored][this.name].push(this.wrapError(add, source));
        } else {
          if (this[underscored] == null) {
            this[underscored] = [];
          }
          this[underscored].push(this.wrapError(add));
        }
      }
      list = (function() {
        var _i, _len, _ref, _results;
        _ref = this[underscored] || [];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          _results.push(item);
        }
        return _results;
      }).call(this);
      _ref = this.source.sources;
      for (file_path in _ref) {
        source = _ref[file_path];
        if ((_ref1 = source[underscored]) != null ? (_ref2 = _ref1[this.name]) != null ? _ref2.length : void 0 : void 0) {
          _ref3 = source[underscored][this.name] || [];
          for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
            item = _ref3[_i];
            list.push(item);
          }
        }
      }
      if (!list.length) {
        return null;
      }
      return list;
    };

    Task.prototype.error = function(add, source) {
      return this._issue('error', add, source);
    };

    Task.prototype.warning = function(add, source) {
      return this._issue('warning', add, source);
    };

    Task.prototype.result = function(value) {
      if (value != null) {
        this._result = value;
      }
      return this._result;
    };

    Task.prototype.size = function() {
      if (typeof this._result === 'string') {
        return this._result.length;
      }
      return null;
    };

    Task.prototype.status = function(value) {
      if (value != null) {
        this._status = value;
        if (value === 0) {
          this._startedAt = Date.now();
        } else if (value === this.count()) {
          this._finishedAt = Date.now();
        }
      }
      return this._status;
    };

    Task.prototype.startedAt = function() {
      return this._startedAt;
    };

    Task.prototype.finishedAt = function() {
      return this._finishedAt;
    };

    Task.prototype.watch = function(watchables, source, callback) {
      var append, count, err, file, gaze_error, k, total, updated, watchable, _i, _j, _k, _len, _len1, _len2, _ref;
      if (watchables == null) {
        watchables = [];
      }
      if (typeof watchables !== 'object') {
        watchables = [watchables];
      }
      if (typeof source === 'function') {
        callback = source;
        source = void 0;
      }
      try {
        if (!source) {
          for (k in this._watched) {
            delete this._watched[k];
          }
          if (this._gaze) {
            this._gaze.close();
          }
          delete this._watching;
        }
        append = [];
        for (_i = 0, _len = watchables.length; _i < _len; _i++) {
          watchable = watchables[_i];
          if (watchable[0] !== '/') {
            watchable = this.source.projectPath + '/' + watchable;
          }
          this._watched[watchable] = new WatchedFile(watchable);
          if (watchable.indexOf('*') > -1) {
            _ref = glob.sync(watchable);
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              file = _ref[_j];
              append.push(file);
              this._watched[file] = new WatchedFile(file);
            }
          }
        }
        watchables = watchables.concat(append);
        updated = (function(_this) {
          return function(event, file) {
            if (_this._watched[file]) {
              return _this._watched[file].changed(function() {
                return _this.watchedFileChanged(event, file, source);
              });
            }
          };
        })(this);
        gaze_error = null;
        count = 0;
        total = watchables.length;
        if (watchables.length && watchables[0]) {
          this._gaze = new gaze;
          this._gaze.on('all', updated);
          for (_k = 0, _len2 = watchables.length; _k < _len2; _k++) {
            watchable = watchables[_k];
            this._gaze.add(watchable);
          }
          return this._watching = true;
        } else if (!source) {
          delete this._gaze;
          return typeof callback === "function" ? callback() : void 0;
        }
      } catch (_error) {
        err = _error;
        return typeof callback === "function" ? callback(err) : void 0;
      }
    };

    Task.prototype.watchedFileChanged = function(event, file, source) {
      if (source && this.source.sources[source.path]) {
        messenger.note('changed: ' + this.source.shortFile(source.path) + ' (' + this.source.shortFile(file) + ')');
        return this.workFile(source, (function(_this) {
          return function() {
            if (!_this.error()) {
              if (typeof _this.followUp === "function") {
                _this.followUp(source);
              }
            }
            return _this.source.checkAllTasksFinished();
          };
        })(this), true);
      } else {
        messenger.note('changed: ' + this.source.shortFile(file));
        return this.work({
          file: file
        });
      }
    };

    Task.prototype.watched = function() {
      var i, k;
      i = null;
      for (k in this._watched || {}) {
        if (i == null) {
          i = 0;
        }
        i += 1;
      }
      return i;
    };

    Task.prototype.work = function() {
      throw new Error('Task.work() is not implemented for ' + this.constructor.name);
    };

    Task.prototype.wrapError = function(inf, source) {
      var _ref;
      return {
        file: (source != null ? typeof source.shortPath === "function" ? source.shortPath() : void 0 : void 0) || (((_ref = this.source) != null ? _ref.name : void 0) + ' repo'),
        title: this.name,
        description: String(inf).split(path.resolve(this.source.projectPath) + '/').join('').trim()
      };
    };

    Task.prototype.preWork = function(work_args, work) {
      var callback, fn, node, post_work;
      if (typeof work_args[0] === 'object' && work_args[0].path) {
        node = work_args[0];
        if (typeof (fn = work_args[1]) === 'function') {
          callback = fn;
        }
      } else {
        if (typeof (fn = work_args[1]) === 'function') {
          callback = fn;
        }
      }
      this.clear();
      this.status(0);
      if ((this.condition != null) && !this.condition()) {
        this.count(0);
        messenger.sendStat(this.name);
        if (!this.error()) {
          if (typeof this.followUp === "function") {
            this.followUp(node);
          }
        }
        return this.source.checkAllTasksFinished();
      }
      messenger.sendStat(this.name);
      post_work = (function(_this) {
        return function() {
          var err, pass_back, result;
          err = arguments[0], result = arguments[1], pass_back = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
          if (err) {
            _this.error(err);
          }
          if (result) {
            _this.result(result);
          }
          _this.status(1);
          if (pass_back != null ? pass_back.length : void 0) {
            if (typeof callback === "function") {
              callback.apply(null, [_this.error].concat(__slice.call(pass_back)));
            }
          } else {
            if (typeof callback === "function") {
              callback(_this.error);
            }
          }
          messenger.sendStat(_this.name);
          if (!_this.error()) {
            if (typeof _this.followUp === "function") {
              _this.followUp(node);
            }
          }
          return _this.source.checkAllTasksFinished();
        };
      })(this);
      return work(post_work);
    };

    return Task;

  })();

  module.exports = Task;

}).call(this);
